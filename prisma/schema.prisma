// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  COMPANY
}

enum Gender {
  FEMALE
  MALE
}

enum Level {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum JobStatus {
  POSTED
  DRAFT
  CLOSED
}

enum PlaceMethoded {
  ONSITE
  HYBRID
  REMOTE
}

enum JobType {
  FULLTIME
  PARTTIME
  INTERNSHIP
  CONTRACT
}

enum StatusApplication {
  APPROVED
  DECLINE
  ONREVIEW
  ONPROGRESS
}

model Profile {
  id              String   @id @unique @default(uuid())
  slug            String   @unique
  name            String   @db.VarChar(255)
  email           String   @unique @db.VarChar(255)
  password        String
  isVerifiedEmail Boolean  @default(false)
  role            Role
  avatar          String?
  province        String   @db.VarChar(255)
  address         String   @db.VarChar(255)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user    User?
  company Company?
}

model User {
  id                  String   @id @unique @default(uuid())
  profileId           String   @unique
  salaryExpectationId String?  @unique
  birthDate           DateTime
  gender              Gender
  phoneNumber         String   @db.VarChar(255)
  headline            String?  @db.VarChar(255)
  about               String?
  url                 String?
  resume              String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  profile             Profile  @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  salaryExpectation   Salary?   @relation(fields: [salaryExpectationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projects            UserProject[]
  educations          UserEducation[]
  workExperiencies    UserWorkExperience[]
  certificates        UserCertificate[]
  skills              UserSkill[]
  savedJobs           SavedJob[]
  applicants          ApplicationList[]
}

model Company {
  id                     String   @id @unique @default(uuid())
  profileId              String   @unique
  companyScopeid         String
  companyTotalEmployeeId String
  headline               String?  @db.VarChar(255)
  about                  String?
  websiteLink            String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now())

  totalEmployee          CompanyTotalEmployee @relation(fields: [companyTotalEmployeeId], references: [id])
  companyScope           CompanyScope         @relation(fields: [companyScopeid], references: [id])
  profile                Profile              @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  jobs                   Job[]
}

model CompanyTotalEmployee {
  id        String   @id @unique @default(uuid())
  total     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  companies Company[]
}

model CompanyScope {
  id        String   @id @unique @default(uuid())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  companies Company[]
}

model UserProject {
  id          String   @id @unique @default(uuid())
  userId      String
  name        String   @db.VarChar(255)
  role        String?  @db.VarChar(255)
  url         String?  @db.VarChar(255)
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserCertificate {
  id            String    @id @unique @default(uuid())
  userId        String
  name          String    @db.VarChar(255)
  organization  String    @db.VarChar(255)
  issueDate     DateTime?
  expiredDate   DateTime?
  credentialId  String    @db.VarChar(255)
  credentialUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserEducation {
  id        String   @id @unique @default(uuid())
  userId    String
  name      String   @db.VarChar(255)
  startDate DateTime
  endDate   DateTime
  field     String   @db.VarChar(255)
  grade     Float?
  maxGrade  Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserWorkExperience {
  id          String    @id @unique @default(uuid())
  userId      String
  companyName String    @db.VarChar(255)
  title       String    @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserSkill {
  id        String   @id @unique @default(uuid())
  userId    String
  skillId   String
  level     Level
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  skill Skill @relation(fields: [skillId], references: [id])
  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Salary {
  id        String   @id @unique @default(uuid())
  min       Int
  max       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User?
  job  Job?
}

model Skill {
  id        String   @id @unique @default(uuid())
  title     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userSkill UserSkill[]
  jobSkill  JobSkill[]
}

model JobSkill {
  id        String   @id @unique @default(uuid())
  skillId   String
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  skill Skill @relation(fields: [skillId], references: [id])
  job   Job   @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model SavedJob {
  id        String   @id @unique @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Job {
  id                   String        @id @unique @default(uuid())
  slug                 String        @unique
  companyId            String
  salaryId             String?       @unique
  placeMethod          PlaceMethoded
  jobType              JobType
  title                String        @db.VarChar(255)
  province             String        @db.VarChar(255)
  address              String        @db.VarChar(255)
  description          String?
  minimumQualification String?
  benefits             String?
  status               JobStatus
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now())

  company              Company           @relation(fields: [companyId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  rangeSalary          Salary?           @relation(fields: [salaryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  skills               JobSkill[]
  savedJobs            SavedJob[]
  applicants           ApplicationList[]
  categories           JobCategory[]
}

model Category {
  id        String   @id @unique @default(uuid())
  title     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  jobCategories JobCategory[]
}

model JobCategory {
  id           String   @id @unique @default(uuid())
  categoryId   String
  jobId        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  categories Category @relation(fields: [categoryId], references: [id])
  job        Job      @relation(fields: [jobId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ApplicationList {
  id        String            @id @unique @default(uuid())
  userId    String
  jobId     String
  resume    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  status    StatusApplication @default(ONPROGRESS)

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}
